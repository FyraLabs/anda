//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "builds")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub package_id: Option<i32>,
    pub owner: Option<i32>,
    #[sea_orm(column_type = "Text")]
    pub build_type: String,
    #[sea_orm(column_type = "Text")]
    pub version: String,
    pub timestamp: DateTimeWithTimeZone,
    pub for_target: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub status: Option<String>,
    pub worker: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::Owner",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
    #[sea_orm(
        belongs_to = "super::projects::Entity",
        from = "Column::PackageId",
        to = "super::projects::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Projects,
    #[sea_orm(
        belongs_to = "super::targets::Entity",
        from = "Column::ForTarget",
        to = "super::targets::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Targets,
    #[sea_orm(has_many = "super::artifacts::Entity")]
    Artifacts,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::targets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Targets.def()
    }
}

impl Related<super::artifacts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Artifacts.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
