//! SeaORM Entity. Generated by sea-orm-codegen 0.9.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "build")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub status: i32,
    pub target_id: Option<Uuid>,
    pub project_id: Option<Uuid>,
    pub timestamp: DateTimeUtc,
    pub compose_id: Option<Uuid>,
    pub build_type: String,
    pub logs: Option<String>,
    pub metadata: Option<serde_json::Value>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::target::Entity",
        from = "Column::ProjectId",
        to = "super::target::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Target2,
    #[sea_orm(
        belongs_to = "super::target::Entity",
        from = "Column::TargetId",
        to = "super::target::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Target1,
    #[sea_orm(has_many = "super::artifact::Entity")]
    Artifact,
}

impl Related<super::artifact::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Artifact.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
